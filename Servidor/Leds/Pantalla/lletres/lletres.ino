#include <stdlib.h>



//ASCII code / Column 1 / Column 2 / ...
int ABECEDARI3[][4] = {
  //'
  {39, 0b0000000000, 0b1110000000, 0b1110000000},
  //|
  {124, 0b0000000000, 0b1111111111, 0b0000000000}
};
int ABECEDARI4[][5] = {
  //
  {32, 0b0000000000, 0b0000000000, 0b0000000000, 0b0000000000},
  //!
  {33, 0b0000000000, 0b1111111011, 0b1111111011, 0b0000000000},
  //(
  {40, 0b0011111000, 0b0111111110, 0b1100000011, 0b0000000000},
  //)
  {41, 0b1100000011, 0b0111111110, 0b0001111000, 0b0000000000},
  //,
  {44, 0b0000000000, 0b0000001101, 0b0000001110, 0b0000000000},
  //.
  {46, 0b0000000000, 0b0000000011, 0b0000000011, 0b0000000000},
  //:
  {58, 0b0000000000, 0b0001100011, 0b0001100011, 0b0000000000},
  //;
  {59, 0b0000000000, 0b0110001101, 0b0110001110, 0b0000000000},
  //I
  {73, 0b0000000000, 0b1111111111, 0b1111111111, 0b0000000000},
  //[
  {91, 0b1111111111, 0b1111111111, 0b1000000001, 0b0000000000},
  //]
  {93, 0b1000000001, 0b1111111111, 0b1111111111, 0b0000000000},
  //`
  {96, 0b1000000000, 0b1100000000, 0b0100000000, 0b0000000000},
  //i
  {105, 0b0000000000, 0b1101111111, 0b1101111111, 0b0000000000},
  //j
  {106, 0b1011111111, 0b1011111110, 0b0000000000, 0b0000000000},
  //l
  {108, 0b0000000000, 0b1111111111, 0b1111111111, 0b0000000000},
  //{
  {123, 0b0111111110, 0b1111101111, 0b1000000001, 0b0000000000},
  //}
  {125, 0b1000000001, 0b1111101111, 0b0111111110, 0b0000010000}
};
int ABECEDARI5[][6] = {
  //*
  {42, 0b0101000000, 0b0101000000, 0b1110000000, 0b0101000000, 0b0101000000},
  //-
  {45, 0b0000000000, 0b0000000100, 0b0000000100, 0b0000000100, 0b0000000000},
  ///
  {47, 0b0000000011, 0b0000011100, 0b0011100000, 0b1100000000, 0b0000000000},
  //\
  {92, 0b1100000000, 0b0011100000, 0b0000011100, 0b0000000011, 0b0000000000},
  //f
  {102, 0b0001000000, 0b0111111111, 0b1111111111, 0b1001000000, 0b1000000000},
  //t
  {116, 0b0001000000, 0b0011111110, 0b0111111111, 0b0001000001, 0b0000000000}
};
int ABECEDARI6[][7] = {
  //"
  {34, 0b0000000000, 0b1110000000, 0b1110000000, 0b0000000000, 0b1110000000, 0b1110000000},
  //$
  {36, 0b0011100100, 0b0100110010, 0b1111111111, 0b0100110010, 0b0010011100, 0b0000000000},
  //r
  {114, 0b0000000000, 0b0001111111, 0b0001111111, 0b0001000000, 0b0001000000, 0b0000000000}
};
int ABECEDARI7[][8] = {
  //0
  {48, 0b0111111110, 0b1111111111, 0b1000000001, 0b1000000001, 0b1111111111, 0b0111111110, 0b0000000000},
  //1
  {49, 0b0000000000, 0b0011000000, 0b0110000000, 0b1111111111, 0b1111111111, 0b0000000000, 0b0000000000},
  //2
  {50, 0b0100000011, 0b1100000111, 0b1000011101, 0b1000111001, 0b1111110001, 0b0111000001, 0b0000000000},
  //3
  {51, 0b0100000010, 0b1100000011, 0b1000100001, 0b1000100001, 0b1111111111, 0b0111011110, 0b0000000000},
  //4
  {52, 0b0000001100, 0b0000110100, 0b0011000100, 0b1111111111, 0b1111111111, 0b0000000100, 0b0000000000},
  //5
  {53, 0b0011100010, 0b1111100011, 0b1101000001, 0b1001000001, 0b1001111111, 0b1000111110, 0b0000000000},
  //6
  {54, 0b0011111110, 0b0111111111, 0b1000100001, 0b1000100001, 0b1100111111, 0b0100011110, 0b0000000000},
  //7
  {55, 0b1000000000, 0b1000000111, 0b1000111111, 0b1011111000, 0b1111000000, 0b1100000000, 0b0000000000},
  //8
  {56, 0b0111011110, 0b1111111111, 0b1000100001, 0b1000100001, 0b1111111111, 0b0111011110, 0b0000000000},
  //9
  {57, 0b0111100010, 0b1111110011, 0b1000010001, 0b1000010001, 0b1111111110, 0b0111111100, 0b0000000000},
  //J
  {74, 0b0000000110, 0b0000000111, 0b0000000001, 0b0000000001, 0b1111111111, 0b1111111110, 0b0000000000},
  //a
  {97, 0b0000000000, 0b0000100110, 0b0001001111, 0b0001011001, 0b0001010001, 0b0001111111, 0b0000111111},
  //c
  {99, 0b0000000000, 0b0000111110, 0b0001111111, 0b0001000001, 0b0001000001, 0b0001100011, 0b0000100010},
  //e
  {101, 0b0000000000, 0b0000111110, 0b0001111111, 0b0001001001, 0b0001001001, 0b0001111011, 0b0000111010},
  //s
  {115, 0b0000110010, 0b0001111011, 0b0001011001, 0b0001001101, 0b0001101111, 0b0000100110, 0b0000000000},
  //z
  {122, 0b0000000000, 0b0001000011, 0b0001001111, 0b0001011101, 0b0001110001, 0b0001100001, 0b0000000000}
};
int ABECEDARI8[][9] = {
  //#
  {35, 0b0001001111, 0b0001111000, 0b1111001000, 0b0001001111, 0b0001111000, 0b1111001000, 0b0000000000, 0b0000000000},
  //+
  {43, 0b0000000000, 0b0000010000, 0b0000010000, 0b0001111100, 0b0001111100, 0b0000010000, 0b0000010000, 0b0000000000},
  //<
  {60, 0b0000010000, 0b0000111000, 0b0000101000, 0b0001101100, 0b0001000100, 0b0011000110, 0b0000000000, 0b0000000000},
  //=
  {61, 0b0000101000, 0b0000101000, 0b0000101000, 0b0000101000, 0b0000101000, 0b0000101000, 0b0000101000, 0b0000000000},
  //>
  {62, 0b0000000000, 0b0011000110, 0b0001000100, 0b0001101100, 0b0000101000, 0b0000111000, 0b0000010000, 0b0000000000},
  //?
  {63, 0b0100000000, 0b1100000000, 0b1000001011, 0b1000011011, 0b1000110000, 0b1111100000, 0b0111000000, 0b0000000000},
  //F
  {70, 0b0000000000, 0b1111111111, 0b1111111111, 0b1000010000, 0b1000010000, 0b1000010000, 0b1000010000, 0b0000000000},
  //L
  {76, 0b0000000000, 0b1111111111, 0b1111111111, 0b0000000001, 0b0000000001, 0b0000000001, 0b0000000001, 0b0000000000},
  //T
  {84, 0b1000000000, 0b1000000000, 0b1000000000, 0b1111111111, 0b1111111111, 0b1000000000, 0b1000000000, 0b1000000000},
  //Z
  {90, 0b1000000011, 0b1000000111, 0b1000011101, 0b1001111001, 0b1011100001, 0b1110000001, 0b1100000001, 0b0000000000},
  //^
  {94, 0b0000010000, 0b0001110000, 0b0111000000, 0b0111000000, 0b0001110000, 0b0000010000, 0b0000000000, 0b0000000000},
  //b
  {98, 0b0000000000, 0b1111111111, 0b1111111111, 0b0000100010, 0b0001000001, 0b0001111111, 0b0000111110, 0b0000000000},
  //d
  {100, 0b0000000000, 0b0000111110, 0b0001111111, 0b0001000001, 0b0000100010, 0b1111111111, 0b1111111111, 0b0000000000},
  //g
  {103, 0b0000000000, 0b0111110010, 0b1111111001, 0b1000001001, 0b0100010001, 0b1111111111, 0b1111111110, 0b0000000000},
  //h
  {104, 0b0000000000, 0b1111111111, 0b1111111111, 0b0000100000, 0b0001000000, 0b0001111111, 0b0000111111, 0b0000000000},
  //k
  {107, 0b0000000000, 0b1111111111, 0b1111111111, 0b0000011000, 0b0000111110, 0b0001100111, 0b0001000001, 0b0000000000},
  //n
  {110, 0b0000000000, 0b0001111111, 0b0001111111, 0b0000100000, 0b0001000000, 0b0001111111, 0b0000111111, 0b0000000000},
  //o
  {111, 0b0000000000, 0b0000111110, 0b0001111111, 0b0001000001, 0b0001000001, 0b0001111111, 0b0000111110, 0b0000000000},
  //p
  {112, 0b0000000000, 0b1111111111, 0b1111111111, 0b0100010000, 0b1000001000, 0b1111111000, 0b0111110000, 0b0000000000},
  //q
  {113, 0b0000000000, 0b0111110000, 0b1111111000, 0b1000001000, 0b0100010000, 0b1111111111, 0b1111111111, 0b0000000000},
  //u
  {117, 0b0000000000, 0b0001111110, 0b0001111111, 0b0000000001, 0b0000000001, 0b0001111111, 0b0001111111, 0b0000000000},
  //v
  {118, 0b0001100000, 0b0001111100, 0b0000011111, 0b0000000011, 0b0000011111, 0b0001111100, 0b0001100000, 0b0000000000},
  //x
  {120, 0b0000000000, 0b0001100011, 0b0001110111, 0b0000011100, 0b0000011100, 0b0001110111, 0b0001100011, 0b0000000000},
  //y
  {121, 0b1100000001, 0b1111100001, 0b0011111111, 0b0000011111, 0b0011111100, 0b1111100000, 0b1100000000, 0b0000000000},
  //~
  {126, 0b0000001000, 0b0000010000, 0b0000010000, 0b0000011000, 0b0000001000, 0b0000001000, 0b0000010000, 0b0000000000}
};
int ABECEDARI9[][10] = {
  //B
  {66, 0b0000000000, 0b1111111111, 0b1111111111, 0b1000100001, 0b1000100001, 0b1000100001, 0b1111111111, 0b0111011110, 0b0000000000},
  //C
  {67, 0b0000000000, 0b0011111100, 0b0111111110, 0b1100000011, 0b1000000001, 0b1000000001, 0b1000000001, 0b1100000011, 0b0100000010},
  //D
  {68, 0b0000000000, 0b1111111111, 0b1111111111, 0b1000000001, 0b1000000001, 0b1100000011, 0b0111111110, 0b0011111100, 0b0000000000},
  //E
  {69, 0b0000000000, 0b1111111111, 0b1111111111, 0b1000100001, 0b1000100001, 0b1000100001, 0b1000100001, 0b0000000000, 0b0000000000},
  //H
  {72, 0b0000000000, 0b1111111111, 0b1111111111, 0b0000100000, 0b0000100000, 0b0000100000, 0b1111111111, 0b1111111111, 0b0000000000},
  //N
  {78, 0b0000000000, 0b1111111111, 0b1111111111, 0b0111000000, 0b0001110000, 0b0000011100, 0b1111111111, 0b1111111111, 0b0000000000},
  //P
  {80, 0b0000000000, 0b1111111111, 0b1111111111, 0b1000010000, 0b1000010000, 0b1000010000, 0b1111110000, 0b0111100000, 0b0000000000},
  //Q
  {81, 0b0001111000, 0b0011111100, 0b0110000110, 0b0100001010, 0b0110000110, 0b0011111110, 0b0001111001, 0b0000000000, 0b0000000000},
  //S
  {83, 0b0000000000, 0b0111000010, 0b1111100011, 0b1001110001, 0b1000110001, 0b1000111001, 0b1100011111, 0b0100001110, 0b0000000000},
  //U
  {85, 0b0000000000, 0b1111111110, 0b1111111111, 0b0000000001, 0b0000000001, 0b0000000001, 0b1111111111, 0b1111111110, 0b0000000000},
  //V
  {86, 0b1100000000, 0b1111100000, 0b0011111100, 0b0000011111, 0b0000000011, 0b0000011111, 0b0011111100, 0b1111100000, 0b1100000000},
  //X
  {88, 0b0000000000, 0b1100000011, 0b1110000111, 0b0011111100, 0b0001111000, 0b0011111100, 0b1110000111, 0b1100000011, 0b0000000000},
  //_
  {95, 0b0000000001, 0b0000000001, 0b0000000001, 0b0000000001, 0b0000000001, 0b0000000001, 0b0000000001, 0b0000000000, 0b0000000000}
};
int ABECEDARI10[][11] = {
  //&
  //{38, 0b0000000000, 0b0000001110, 0b0110011111, 0b1111110001, 0b1001111001, 0b1111011111, 0b0111000110, 0b0000011111, 0b0000000001, 0b0000000000},
  //A
  {65, 0b0000000011, 0b0000011111, 0b0011111100, 0b1111100100, 0b1100000100, 0b1111100100, 0b0011111100, 0b0000011111, 0b0000000011, 0b0000000000},
  //G
  {71, 0b0000000000, 0b0011111100, 0b0111111110, 0b1100000011, 0b1000000001, 0b1000010001, 0b1000010001, 0b1100011111, 0b0100011110, 0b0000000000},
  //K
  {75, 0b0000000000, 0b1111111111, 0b1111111111, 0b0000110000, 0b0011100000, 0b0111111100, 0b1100011111, 0b1000000011, 0b0000000000, 0b0000000000},
  //O
  {79, 0b0000000000, 0b0011111100, 0b0111111110, 0b1100000011, 0b1000000001, 0b1000000001, 0b1100000011, 0b0111111110, 0b0011111100, 0b0000000000},
  //R
  {82, 0b0000000000, 0b1111111111, 0b1111111111, 0b1000010000, 0b1000010000, 0b1000011000, 0b1111111110, 0b0111100111, 0b0000000001, 0b0000000000},
  //Y
  {89, 0b1100000000, 0b1110000000, 0b0011100000, 0b0001111111, 0b0001111111, 0b0011100000, 0b1110000000, 0b1100000000, 0b0000000000, 0b0000000000}
};
int ABECEDARI11[][12] = {
  //@
  {64, 0b0001111000, 0b0110000110, 0b0100111010, 0b1011000101, 0b1010000101, 0b1010001101, 0b1011111101, 0b1011000101, 0b0100001010, 0b0011110010, 0b0000000000},
  //M
  {77, 0b0000000000, 0b1111111111, 0b1111111111, 0b1111100000, 0b0011111110, 0b0000000111, 0b0011111110, 0b1111100000, 0b1111111111, 0b1111111111, 0b0000000000},
  //W
  {87, 0b1100000000, 0b1111111000, 0b0011111111, 0b0000000111, 0b0001111111, 0b1111111000, 0b0001111111, 0b0000000111, 0b0011111111, 0b1111111000, 0b1100000000},
  //w
  {119, 0b0001100000, 0b0001111100, 0b0000011111, 0b0000000111, 0b0000111110, 0b0001110000, 0b0000111110, 0b0000000111, 0b0000011111, 0b0001111100, 0b0001100000}
};
int ABECEDARI12[][13] = {
  //%
  {37, 0b0000000000, 0b1111100000, 0b1000100000, 0b1111100011, 0b0000011100, 0b0001100000, 0b1110011111, 0b0000010001, 0b0000011111, 0b0000000000, 0b0000000000, 0b0000000000},
  //m
  {109, 0b0000000000, 0b0001111111, 0b0001111111, 0b0000100000, 0b0001000000, 0b0001111111, 0b0001111111, 0b0000100000, 0b0001000000, 0b0001111111, 0b0000111111, 0b0000000000}
};
//Manualy, i reduced width of this letter
//int ABECEDARI13[][14] = {
  //W
  //{87, 0b1100000000, 0b1111111000, 0b0011111111, 0b0000000111, 0b0001111111, 0b1111111000, 0b1110000000, 0b1111111000, 0b0001111111, 0b0000000111, 0b0011111111, 0b1111111000, 0b1100000000}
//};


int* TotesLesFonts[] = {(int*)&ABECEDARI3,(int*)&ABECEDARI4,(int*)&ABECEDARI5,(int*)&ABECEDARI6,(int*)&ABECEDARI7,(int*)&ABECEDARI8,(int*)&ABECEDARI9,(int*)&ABECEDARI10,(int*)&ABECEDARI11,(int*)&ABECEDARI12}; //,(int*)&ABECEDARI13};
//with of any type of font
int TotesLesFontsAmplada[] ={sizeof(ABECEDARI3[0]) / sizeof(ABECEDARI3[0][0])-1,     //3
                              sizeof(ABECEDARI4[0]) / sizeof(ABECEDARI4[0][0])-1,    //4
                              sizeof(ABECEDARI5[0]) / sizeof(ABECEDARI5[0][0])-1,    //5
                              sizeof(ABECEDARI6[0]) / sizeof(ABECEDARI6[0][0])-1,    //6
                              sizeof(ABECEDARI7[0]) / sizeof(ABECEDARI7[0][0])-1,    //7
                              sizeof(ABECEDARI8[0]) / sizeof(ABECEDARI8[0][0])-1,    //8
                              sizeof(ABECEDARI9[0]) / sizeof(ABECEDARI9[0][0])-1,    //9
                              sizeof(ABECEDARI10[0]) / sizeof(ABECEDARI10[0][0])-1,  //10
                              sizeof(ABECEDARI11[0]) / sizeof(ABECEDARI11[0][0])-1,  //11
                              sizeof(ABECEDARI12[0]) / sizeof(ABECEDARI12[0][0])-1};  //12
//                              sizeof(ABECEDARI13[0]) / sizeof(ABECEDARI13[0][0])-1}; //13
//How many fons we have of with3, with4, width5,..)
int TotesLesFontsQuantes[] ={sizeof(ABECEDARI3) / sizeof(ABECEDARI3[0]),
                              sizeof(ABECEDARI4) / sizeof(ABECEDARI4[0]),
                              sizeof(ABECEDARI5) / sizeof(ABECEDARI5[0]),
                              sizeof(ABECEDARI6) / sizeof(ABECEDARI6[0]),
                              sizeof(ABECEDARI7) / sizeof(ABECEDARI7[0]),
                              sizeof(ABECEDARI8) / sizeof(ABECEDARI8[0]),
                              sizeof(ABECEDARI9) / sizeof(ABECEDARI9[0]),
                              sizeof(ABECEDARI10) / sizeof(ABECEDARI10[0]),
                              sizeof(ABECEDARI11) / sizeof(ABECEDARI11[0]),
                              sizeof(ABECEDARI12) / sizeof(ABECEDARI12[0])};
//                              sizeof(ABECEDARI13) / sizeof(ABECEDARI13[0])};

byte QuantesTaulesFonts = sizeof(TotesLesFontsAmplada)/sizeof(TotesLesFontsAmplada[0]);


//When i found a char to write, i will store there
int  fontAEscriure[13];
byte ampladaFontAEscriure;

//30 primeres posicions son la pantalla real, les altres 11 son per offset
const byte screenWidth = 30;
//One less than the bigest letter width
const byte screenOffset = 11; 
byte posScreen = 0;
int screen[screenWidth+screenOffset];



void setup() {
  // put your setup code here, to run once:

  Serial.begin(9600);
  delay(3000);
}

void loop() {
  
  

  for (int i =48; i<200;i++)
    if (cercarFont((char)i)){
  /*  Serial.print(i);
      Serial.println((char)i);
      escriureLletraSeleccionada()
      delay(10000);*/
      
      encuarFontScreen();
      while (posScreen> 0){
          Serial.println("INICI PANTALLA");
          escriureScreenUSB();
          ferCorrerScreen();
          Serial.println("FINAL PANTALLA");
          delay(100);
      }
    
    } else {
      //Serial.print("Font No trobada:");
      //Serial.println(i);
    }
    



}




/*
 * Iterar a trabés de les taules de amplades de fonts per trobar la que busquem
 */
boolean cercarFont(char pCaracter){
  int iCaracter = pCaracter;
  
  //reinicialitzem les variables de font trobada de la llista
  ampladaFontAEscriure = 0;
  for( int i =0;i<13;i++) {fontAEscriure[i]=0;}


  for (int i=0;i<QuantesTaulesFonts;i++){
    cercarFontLletres(TotesLesFonts[i],TotesLesFontsQuantes[i],TotesLesFontsAmplada[i],iCaracter);
    if (ampladaFontAEscriure != 0) break;
  }


  return ampladaFontAEscriure > 0;
}

/*
 * Iterar sobre una taula d'una amplada concret de font 
 */
void cercarFontLletres(int *pArrayLletres, byte pQuantesLLetres, byte pMidaLletres, int pCaracter){
    for (byte lletra = 0; lletra < pQuantesLLetres; lletra++) {
        if (pCaracter ==  pArrayLletres[lletra * (pMidaLletres+1)]){
          int posIni = lletra * (pMidaLletres+1)+1;
          ampladaFontAEscriure = pMidaLletres;
          for( int i =0;i<ampladaFontAEscriure;i++) {fontAEscriure[i]=pArrayLletres[posIni+i];}
          break;
        }
        
    }
}

/*
 *
 */
void encuarFontScreen(){
 
  for (byte i =0;i<ampladaFontAEscriure;i++){
    screen[screenWidth+i-1] = fontAEscriure[i];
  }
  posScreen = ampladaFontAEscriure;
}

/*
 * 
 */
void escriureScreenUSB(){
        for (int colunes = 0; colunes < screenWidth+screenOffset; colunes++) {
          for (int bits = 9; bits > -1; bits--) {
            // Compare bits 7-0 in byte
            if (screen[colunes] & (1 << bits)) { Serial.print("1");  }
            else {                               Serial.print(" ");  }
          }
          Serial.print("\n");
       }
}

/*
 * 
 */
void ferCorrerScreen(){
  for (int columna = 0; columna < screenWidth+screenOffset-1; columna++) {
    screen[columna]=screen[columna+1];
  }
  screen[screenWidth+screenOffset-1]=0;
  posScreen = posScreen -1;
}



/*
 * 
 */
void escriureLletraSeleccionada(){
      for (int colunes = 0; colunes < ampladaFontAEscriure; colunes++) {
        Serial.println(fontAEscriure[colunes]);
          for (int bits = 9; bits > -1; bits--) {
            // Compare bits 7-0 in byte
            if (fontAEscriure[colunes] & (1 << bits)) { Serial.print("1");  }
            else {                                      Serial.print(" ");  }
          }
          Serial.print("\n");
       }
}
